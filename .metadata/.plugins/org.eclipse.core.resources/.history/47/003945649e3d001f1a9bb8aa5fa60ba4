package com.mrlubert.prisoncontrol;

import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.OfflinePlayer;
import org.bukkit.block.Block;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.ItemType;
import org.bukkit.inventory.meta.Damageable;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryDragEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.inventory.InventoryType;
import org.bukkit.metadata.FixedMetadataValue;
import org.bukkit.plugin.Plugin;

import me.wiefferink.areashop.AreaShop;
import me.wiefferink.areashop.regions.RentRegion;
import net.md_5.bungee.api.ChatMessageType;
import net.md_5.bungee.api.chat.TextComponent;
import tech.mcprison.prison.ranks.data.RankPlayer;
import tech.mcprison.prison.ranks.events.RankUpEvent;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.HashSet;
import java.util.List;

import org.bukkit.command.CommandSender;

public class Events implements Listener
{

    public static boolean aoepick = false;

    static final List< String > hideRepair = new ArrayList<>();

    Events(){}

	@EventHandler
    public void onBlockBreak(BlockBreakEvent event)
    {
        
        Player player = event.getPlayer();
        ItemStack item = player.getInventory().getItemInMainHand();
        if (aoepick)
        {
            //stop our event recurring
            return;
        }
        //Are we using one of our picks
        if (Xpick.isPick(item))
        {
            aoepick = true;
            //this is an Xpick
            Xpick x = new Xpick();
            x.breakBlock(event);
        }else if (Pickoplenty.isPick(item))
        {
            Pickoplenty pop = new Pickoplenty();
            pop.breakBlock(event);
        }else if (XPickoPlenty.isPick(item))
        {
            aoepick = true;
            XPickoPlenty xpop = new XPickoPlenty();
            xpop.breakBlock(event);
        }

        aoepick = false;

    }
    
    @EventHandler
    public void onPlayerInteract(PlayerInteractEvent event)
    {
        Player player = event.getPlayer();
        ItemStack item = player.getInventory().getItemInMainHand();
        if ((event.getAction() == Action.RIGHT_CLICK_BLOCK)) 
        {
        	if (player.getInventory().getItemInMainHand().getType() == Material.ACACIA_BOAT) {
        		player.sendMessage("No *judge*");
        		event.setCancelled(true);
        	}
        	if (player.getInventory().getItemInMainHand().getType() == Material.BIRCH_BOAT) {
        		player.sendMessage("No *judge*");
        		event.setCancelled(true);
        	}
        	if (player.getInventory().getItemInMainHand().getType() == Material.CHERRY_BOAT) {
        		player.sendMessage("No *judge*");
        		event.setCancelled(true);
        	}
        	if (player.getInventory().getItemInMainHand().getType() == Material.DARK_OAK_BOAT) {
        		player.sendMessage("No *judge*");
        		event.setCancelled(true);
        	}
        	if (player.getInventory().getItemInMainHand().getType() == Material.JUNGLE_BOAT) {
        		player.sendMessage("No *judge*");
        		event.setCancelled(true);
        	}
        	if (player.getInventory().getItemInMainHand().getType() == Material.MANGROVE_BOAT) {
        		player.sendMessage("No *judge*");
        		event.setCancelled(true);
        	}
        	if (player.getInventory().getItemInMainHand().getType() == Material.OAK_BOAT) {
        		player.sendMessage("No *judge*");
        		event.setCancelled(true);
        	}
        	if (player.getInventory().getItemInMainHand().getType() == Material.SPRUCE_BOAT) {
        		player.sendMessage("No *judge*");
        		event.setCancelled(true);
        	}      
        	if (player.getInventory().getItemInMainHand().getType() == Material.WATER_BUCKET) {
        		player.sendMessage("No *judge*");
        		event.setCancelled(true);
        	}  
        	if (player.getInventory().getItemInMainHand().getType() == Material.BUCKET) {
        		player.sendMessage("No *judge*");
        		event.setCancelled(true);
        	}  
        	if (player.getInventory().getItemInMainHand().getType() == Material.LAVA_BUCKET) {
        		player.sendMessage("No *judge*");
        		event.setCancelled(true);
        	}  
        }
        //are they using one of our picks
        ItemMeta itemMeta = item.getItemMeta();
        if ((event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK)
            && (Xpick.isPick(item) || Pickoplenty.isPick(item) || XPickoPlenty.isPick(item))
            && ((Damageable) itemMeta).getDamage() > 0)
        {
            if (!hideRepair.contains(player.getName()))
            {
                if (Pickoplenty.isPick(item))
                {
                    player.spigot().sendMessage(ChatMessageType.ACTION_BAR, new TextComponent(Config.CHAT_POP_REPAIR + "[Pickaxe Repaired]"));
                } else if (XPickoPlenty.isPick(item))
                {
                    player.spigot().sendMessage(ChatMessageType.ACTION_BAR, new TextComponent(Config.CHAT_XPOP_REPAIR + "[Pickaxe Repaired]"));
                } else
                {
                    player.spigot().sendMessage(ChatMessageType.ACTION_BAR, new TextComponent(Config.CHAT_EXPLOSIVE_REPAIR + "[Pickaxe Repaired]"));
                }
            }
            //short s = 0;
            
            ((Damageable) itemMeta).setDamage(0);
            item.setItemMeta(itemMeta);
        }
    }

	@EventHandler
    public void onBlockPlace(BlockPlaceEvent event)
    {
    	Player player = event.getPlayer();
        
        Block b = event.getBlock();
        b.setMetadata("blockBreaker", new FixedMetadataValue(PrisonPicks.getInstance(), player.getUniqueId()));
        }
	
	
	/*    */   @EventHandler
	/*    */   public void onInventoryClick(InventoryClickEvent e) {
	/* 31 */     Player p = (Player)e.getWhoClicked();
	/* 32 */     int slot = e.getSlot();
	/* 33 */     if (e.getClickedInventory() == null || e.getClickedInventory().getType() != InventoryType.ENDER_CHEST) {
	/*    */       return;
	/*    */     }
	/* 36 */     if (p.hasPermission("ezprestige.prestige.20")) {
	/*    */       return;
	/*    */     }
	/* 39 */     for (int i = 19; i > 0; ) {
	/* 40 */       if (!p.hasPermission("ezprestige.prestige." + i)) { i--; continue; }
	/* 41 */        if (slot > i) {
	/* 42 */         e.setCancelled(true);
	/*    */         return;
	/*    */       } 
	/*    */       return;
	/*    */     } 
	/* 47 */     if (slot > 0) {
	/* 48 */       e.setCancelled(true);
	/*    */       return;
	/*    */     } 
	/*    */   }
	/*    */   @EventHandler
	/*    */   public void onOpenInv(InventoryOpenEvent e) {
	/* 36 */     Player p = (Player)e.getPlayer();
	/* 37 */     if (e.getInventory() == null || e.getInventory().getType() != InventoryType.ENDER_CHEST)
	/*    */       return; 
	/*    */     int i;
	/* 40 */     for (i = 0; i <= 26; i++) {
	/* 41 */       if (e.getInventory().getItem(i) != null && e.getInventory().getItem(i).getType() == Material.BARRIER)
	/* 42 */         e.getInventory().clear(i); 
	/*    */     } 
	/* 44 */     if (p.hasPermission("ezprestige.prestige.20")) {
	/*    */       return;
	/*    */     }
	/* 47 */     for (int n = 19; n > 0; ) {
	/* 48 */       if (!p.hasPermission("ezprestige.prestige." + n)) { n--; continue; }
	/* 49 */        for (int i2 = n + 1; i2 <= 26; i2++) {
	/* 50 */         e.getInventory().setItem(i2, new ItemStack(Material.BARRIER, 1));
	/*    */       }
	/*    */       return;
	/*    */     } 
	/* 54 */     for (i = 1; i <= 26; i++)
	/* 55 */       e.getInventory().setItem(i, new ItemStack(Material.BARRIER, 1)); 
	/*    */   }
	/*    */   @EventHandler
	/*    */   public void onDrag(InventoryDragEvent e) {
	/* 20 */     Player p = (Player)e.getWhoClicked();
	/* 21 */     Inventory to = e.getInventory();
	/* 22 */     if (to.getType() != InventoryType.ENDER_CHEST) {
	/*    */       return;
	/*    */     }
	/* 25 */     if (p.hasPermission("ezprestige.prestige.20")) {
	/*    */       return;
	/*    */     }
	/* 28 */     for (int i = 19; i > 0; ) {
	/* 29 */       if (!p.hasPermission("ezprestige.prestige." + i)) { i--; continue; }
	/* 30 */        Iterator<Integer> iterator = e.getInventorySlots().iterator();
	/* 31 */       while (iterator.hasNext()) {
	/* 32 */         int j = ((Integer)iterator.next()).intValue();
	/* 33 */         if (j <= i - 1)
	/* 34 */           continue;  e.setCancelled(true);
	/*    */         return;
	/*    */       } 
	/*    */       return;
	/*    */     } 
	/* 39 */     Iterator<Integer> inv = e.getInventorySlots().iterator();
	/* 40 */     while (inv.hasNext()) {
	/* 41 */       int inv2 = ((Integer)inv.next()).intValue();
	/* 42 */       if (inv2 <= 0)
	/* 43 */         continue;  e.setCancelled(true);
	/*    */       return;
	/*    */     } 
	/*    */   }
	/*    */   private AreaShop as;
	/*    */   private GambleUtils gambleUtils;
	/*    */   
	/*    */   public Events(PrisonPicks plugin) {
	/* 44 */     this.as = getAreaShop();
	/*    */   }
	             private static AreaShop getAreaShop() {
		/* 49 */     Plugin plugin = Bukkit.getServer().getPluginManager().getPlugin("AreaShop");
		/* 50 */     if (plugin == null || !(plugin instanceof AreaShop)) {
		/* 51 */       return null;
		/*    */     }
		/* 53 */     return (AreaShop)plugin;
		/*    */   }
		/*    */   
		/*    */   @EventHandler
		/*    */   public void onRankup(RankUpEvent e) {
		/* 58 */     RankPlayer player = e.getPlayer();
		/* 59 */     if (e.getNewRank().toString().equalsIgnoreCase("Panda") || e.getNewRank().toString().equalsIgnoreCase("Lion") || 
		/* 60 */       e.getNewRank().toString().equalsIgnoreCase("Dragon")) {
		/* 61 */       if (this.gambleUtils.prestigeTokened.contains(player.getName())) {
		/* 62 */         if (e.getNewRank().toString().equalsIgnoreCase("Dragon")) {
		/* 63 */           this.gambleUtils.prestigeTokened.remove(player.getName());
		/*    */         }
		/*    */         return;
		/*    */       } 
		/* 67 */       HashSet<RentRegion> rentRegions = new HashSet<>();
		/* 68 */       List<RentRegion> lr = this.as.getFileManager().getRents();
		/* 69 */       for (RentRegion region : lr) {
		/* 70 */         if (!region.isOwner((OfflinePlayer)player))
		/*    */           continue; 
		/* 72 */         rentRegions.add(region);
		/*    */       } 
		/* 74 */       for (RentRegion r : rentRegions)
		/* 75 */         r.unRent(true, (CommandSender)player); 
		/*    */     } 
		/*    */   }
		
		/*    */   @EventHandler
		/*    */   public void onPrestige(RankUpEvent e) {
		/* 61 */     RankPlayer player = e.getPlayer();
		/* 62 */     HashSet<RentRegion> rentRegions = new HashSet<>();
		/* 63 */     List<RentRegion> lr = this.as.getFileManager().getRents();
		             if (e.getNewRank().getLadder().toString().equals("prestiges") && e.getNewRank().toString().equalsIgnoreCase("Monkey") || e.getNewRank().toString().equalsIgnoreCase("Default")) {      	 
		/* 64 */     int slot = player.getInventory().first((tech.mcprison.prison.internal.ItemStack) ItemType.DIAMOND_HORSE_ARMOR);
		/* 65 */     if (slot == -1) {
		/* 66 */       for (RentRegion region : lr) {
		/* 67 */         if (!region.isOwner((OfflinePlayer)player))
		/*    */           continue; 
		/* 69 */         rentRegions.add(region);
		/*    */       } 
		/* 71 */       for (RentRegion r : rentRegions) {
		/* 72 */         r.unRent(true, (CommandSender)player);
		/*    */       }
		/* 74 */       Bukkit.getServer().dispatchCommand((CommandSender)Bukkit.getConsoleSender(), "clearinventory " + player.getName());
		/*    */     } else {
		/* 76 */       this.gambleUtils.prestigeTokened.add(player.getName());
		/* 77 */       player.getInventory().clear(slot);
		/*    */     } 
		/*    */   }
		}
    }