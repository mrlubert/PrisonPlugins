package com.mrlubert.prisoncontrol;

/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.HashMap;
/*     */ import java.util.HashSet;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.Set;
/*     */ import java.util.concurrent.ThreadLocalRandom;
/*     */ import org.bukkit.Bukkit;
/*     */ import org.bukkit.ChatColor;
/*     */ import org.bukkit.Material;
/*     */ import org.bukkit.command.CommandSender;
/*     */ import org.bukkit.configuration.ConfigurationSection;
/*     */ import org.bukkit.configuration.file.FileConfiguration;
/*     */ import org.bukkit.configuration.file.YamlConfiguration;
/*     */ import org.bukkit.enchantments.Enchantment;
/*     */ import org.bukkit.entity.Player;
/*     */ import org.bukkit.event.EventHandler;
/*     */ import org.bukkit.event.EventPriority;
/*     */ import org.bukkit.event.server.PluginDisableEvent;
/*     */ import org.bukkit.inventory.ItemStack;
/*     */ import org.bukkit.inventory.meta.ItemMeta;
/*     */ import org.bukkit.plugin.Plugin;
/*     */ import org.bukkit.plugin.PluginManager;
import org.checkerframework.checker.nullness.qual.NonNull;

import net.luckperms.api.LuckPerms;
import net.luckperms.api.model.group.GroupManager;
/*     */ 
/*     */ 
/*     */ public class GambleUtils
/*     */ {
/*     */   private PrisonPicks main;
            private LuckPerms groupManager;
/*     */   public int totalPossible;
/*     */   public HashMap<String, Integer> totals;
/*     */   public HashMap<String, ItemStack> items;
/*     */   public HashMap<String, String> commands;
/*     */   public Set<String> prestigeTokened;
/*     */   public Map<String, Object> rewards;
/*     */   public Map<String, Object> tot;
/*  45 */   public Set<String> ranks = new HashSet<>(Arrays.asList(new String[] { "Turtle", "Rabbit", "Seagull" }));
/*  46 */   public Set<String> picks = new HashSet<>(Arrays.asList(new String[] { "XPick" }));
/*     */   public static HashMap<String, String> suffixes;
/*     */   File customYml;
/*     */   File prestigeTokens;
/*     */   FileConfiguration customConfig;
/*     */   FileConfiguration prestigeTokensConfig;
/*     */   
/*     */   public GambleUtils(PrisonPicks plugin) {
/*  54 */     this.main = plugin;
/*  55 */     this.totalPossible = 0;
/*  56 */     this.totals = new HashMap<>();
/*  57 */     this.items = new HashMap<>();
/*  58 */     this.commands = new HashMap<>();
/*  59 */     suffixes = new HashMap<>();
/*  60 */     this.prestigeTokened = new HashSet<>(Arrays.asList(new String[0]));
/*  61 */     this.customYml = new File(this.main.getDataFolder() + "/totals.yml");
/*  62 */     this.customConfig = (FileConfiguration)YamlConfiguration.loadConfiguration(this.customYml);
/*  63 */     this.prestigeTokens = new File(this.main.getDataFolder() + "/prestigeTokens.yml");
/*  64 */     this.prestigeTokensConfig = (FileConfiguration)YamlConfiguration.loadConfiguration(this.prestigeTokens);
/*  65 */     loadConfiguration();
/*  66 */     loadRewardMaps();
/*  67 */     this.main.getLogger().info("[KappaGamble] Loaded successfully.");
/*  68 */     PluginManager pluginManager = plugin.getServer().getPluginManager();
/*  69 */     Plugin LPplugin = pluginManager.getPlugin("LuckPerms");
/*  70 */     if (LPplugin != null && LPplugin.isEnabled()) {
/*  71 */       this.groupManager = (LuckPerms)LPplugin;
/*     */     }
/*     */   }
/*     */   
/*     */   public void loadConfiguration() {
/*  76 */     FileConfiguration config = this.main.getConfig();
/*  77 */     this.rewards = config.getConfigurationSection("Gamble.rewards").getValues(false);
/*  78 */     ConfigurationSection x = this.customConfig.getConfigurationSection("Totals");
/*  79 */     this.tot = x.getValues(false);
/*  80 */     for (String key22 : this.rewards.keySet()) {
/*  81 */       this.totalPossible += ((Integer)this.rewards.get(key22)).intValue();
/*     */     }
/*  83 */     for (String key22 : this.tot.keySet()) {
/*  84 */       this.totals.put(key22, (Integer)this.tot.get(key22));
/*     */     }
/*  86 */     this.prestigeTokened.addAll(this.prestigeTokensConfig.getStringList("Tokened"));
/*     */   }
/*     */   
/*     */   public void saveCustomYml() {
/*  90 */     for (String s : this.totals.keySet()) {
/*  91 */       this.customConfig.set("Totals." + s, this.totals.get(s));
/*     */     }
/*  93 */     ArrayList<String> tokenedList = new ArrayList<>();
/*  94 */     tokenedList.addAll(this.prestigeTokened);
/*  95 */     this.prestigeTokensConfig.set("Tokened", tokenedList);
/*     */     try {
/*  97 */       this.customConfig.save(this.customYml);
/*  98 */       this.prestigeTokensConfig.save(this.prestigeTokens);
/*  99 */     } catch (IOException e) {
/* 100 */       e.printStackTrace();
/*     */     } 
/*     */   }
/*     */   
/*     */   public String randomReward() {
/* 105 */     int rand = getRandom(1, this.totalPossible);
/* 106 */     int currentMax = this.totalPossible;
/* 107 */     int currentMin = 0;
/* 108 */     int nextMax = 0;
/* 109 */     for (String s : this.rewards.keySet()) {
/* 110 */       int i = ((Integer)this.rewards.get(s)).intValue();
/* 111 */       currentMin = (currentMax -= nextMax) - i;
/* 112 */       nextMax = i;
/* 113 */       if (currentMin >= rand || rand > currentMax)
/*     */         continue; 
/*     */       try {
/* 116 */         this.totals.put(s, Integer.valueOf(((Integer)this.totals.get(s)).intValue() + 1));
/* 117 */       } catch (NullPointerException e) {
/* 118 */         this.totals.put(s, Integer.valueOf(1));
/*     */       } 
/*     */       try {
/* 121 */         this.totals.put("EmeraldsUsed", Integer.valueOf(((Integer)this.totals.get("EmeraldsUsed")).intValue() + 1));
/* 122 */       } catch (NullPointerException e) {
/* 123 */         this.totals.put("EmeraldsUsed", Integer.valueOf(1));
/*     */       } 
/* 125 */       return s;
/*     */     } 
/* 127 */     return "";
/*     */   }
/*     */ 
/*     */   
/*     */   public void giveReward(Player p) {
/* 132 */     String reward = randomReward();
/* 133 */     String name = p.getName();
/* 134 */     List<String> groups = getGroups(p);
/* 135 */     if (this.commands.containsKey(reward)) {
/* 136 */       if (this.ranks.contains(reward)) {
/* 137 */         if (groups.contains("Turtle") && !reward.equalsIgnoreCase("Myra") && 
/* 138 */           !reward.equalsIgnoreCase("Phoenix")) {
/* 139 */           addItem(this.items.get(String.valueOf(String.valueOf(String.valueOf(reward))) + "_Hoe"), p);
/* 140 */           Bukkit.broadcastMessage(
/* 141 */               ChatColor.GOLD + name + " just won a " + ChatColor.AQUA + reward + 
/* 142 */               ChatColor.GOLD + " rank but already has Turtle!");
/*     */           return;
/*     */         } 
/* 145 */         if (groups.contains("Rabbit") && !reward.equalsIgnoreCase("Myra") && !reward.equalsIgnoreCase("Phoenix") && 
/* 146 */           !reward.equalsIgnoreCase("Turtle")) {
/* 147 */           addItem(this.items.get(String.valueOf(String.valueOf(String.valueOf(reward))) + "_Hoe"), p);
/* 148 */           Bukkit.broadcastMessage(
/* 149 */               ChatColor.GOLD + name + " just won a " + ChatColor.AQUA + reward + 
/* 150 */               ChatColor.GOLD + " rank but already has Rabbit!");
/*     */           return;
/*     */         } 
/* 153 */         if (groups.contains("Seagull") && !reward.equalsIgnoreCase("Myra") && 
/* 154 */           !reward.equalsIgnoreCase("Phoenix") && !reward.equalsIgnoreCase("Turtle") && 
/* 155 */           !reward.equalsIgnoreCase("Rabbit")) {
/* 156 */           addItem(this.items.get(String.valueOf(String.valueOf(String.valueOf(reward))) + "_Hoe"), p);
/* 157 */           Bukkit.broadcastMessage(
/* 158 */               ChatColor.GOLD + name + " just won a " + ChatColor.AQUA + reward + 
/* 159 */               ChatColor.GOLD + " rank but already has Seagull!");
/*     */           return;
/*     */         } 
/* 162 */         String str = ((String)this.commands.get(reward)).replace("[user]", name);
/* 163 */         this.main.getServer().dispatchCommand((CommandSender)this.main.getServer().getConsoleSender(), str);
/* 164 */         this.main.getServer().dispatchCommand((CommandSender)Bukkit.getConsoleSender(), 
/* 165 */             "lp user " + name + " parent add " + (String)suffixes.get(reward));
/* 166 */         Bukkit.broadcastMessage(ChatColor.GOLD + name + " just won a " + 
/* 167 */             ChatColor.AQUA + reward + ChatColor.GOLD + " rank!"); return;
/*     */       } 
/* 169 */       if (this.picks.contains(reward) && 
/* 170 */         reward.equalsIgnoreCase("XPick")) {
/* 171 */         String str = ((String)this.commands.get(reward)).replace("[user]", name);
/* 172 */         this.main.getServer().dispatchCommand((CommandSender)this.main.getServer().getConsoleSender(), str);
/* 173 */         Bukkit.broadcastMessage(ChatColor.GOLD + name + " just won an " + 
/* 174 */             ChatColor.AQUA + "Explosive Pick!");
/*     */         
/*     */         return;
/*     */       } 
/* 178 */       if (reward.equalsIgnoreCase("10M")) {
/* 179 */         Bukkit.broadcastMessage(ChatColor.GOLD + name + " just won" + ChatColor.AQUA + " 10 Mil" + ChatColor.GOLD + "!");
/*     */       }
/* 181 */       String s = ((String)this.commands.get(reward)).replace("[user]", name);
/* 182 */       this.main.getServer().dispatchCommand((CommandSender)this.main.getServer().getConsoleSender(), s);
/* 183 */     } else if (this.items.containsKey(reward)) {
/*     */ 
/*     */       
/* 186 */       addItem(this.items.get(reward), p);
/*     */     } 
/*     */   }
/*     */   
/*     */   public void loadRewardMaps() {
/* 194 */     this.items.clear();
/* 195 */     this.commands.clear();
/* 196 */     ItemStack tHoe = new ItemStack(Material.GOLDEN_HOE);
/* 197 */     ItemStack rHoe = new ItemStack(Material.GOLDEN_HOE);
/* 198 */     ItemStack sHoe = new ItemStack(Material.GOLDEN_HOE);
/* 199 */     ItemStack prestigeToken = new ItemStack(Material.DIAMOND_HORSE_ARMOR);
/* 200 */     ItemMeta tM = tHoe.getItemMeta();
/* 201 */     ItemMeta rM = rHoe.getItemMeta();
/* 202 */     ItemMeta sM = sHoe.getItemMeta();
/* 203 */     ItemMeta prestigeM = prestigeToken.getItemMeta();
/* 204 */     sM.setDisplayName(ChatColor.GRAY + "[" + ChatColor.GOLD + "Seagull" + ChatColor.GRAY + 
/* 205 */         "]" + ChatColor.RESET + " UPGRADE");
/* 206 */     rM.setDisplayName(ChatColor.LIGHT_PURPLE + "[" + ChatColor.WHITE + "Rabbit" + 
/* 207 */         ChatColor.LIGHT_PURPLE + "]" + ChatColor.RESET + " UPGRADE");
/* 208 */     tM.setDisplayName(ChatColor.GOLD + "[" + ChatColor.YELLOW + "Turtle" + ChatColor.GOLD + 
/* 209 */         "]" + ChatColor.RESET + " UPGRADE");
/* 210 */     prestigeM.setDisplayName(ChatColor.GREEN + "Prestige Token");
/* 211 */     ArrayList<String> Lore = new ArrayList<>();
/* 212 */     ArrayList<String> prestigeLore = new ArrayList<>();
/* 213 */     Lore.add(ChatColor.GOLD + "Right click on Sketch in the pagoda to claim this.");
/* 214 */     prestigeLore.add(ChatColor.GOLD + "If you hold this when you prestige,");
/* 215 */     prestigeLore.add(ChatColor.GOLD + "you won't lose your cell.");
/* 216 */     tM.setLore(Lore);
/* 217 */     rM.setLore(Lore);
/* 218 */     sM.setLore(Lore);
/* 219 */     prestigeM.setLore(prestigeLore);
/* 220 */     tHoe.setItemMeta(tM);
/* 221 */     rHoe.setItemMeta(rM);
/* 222 */     sHoe.setItemMeta(sM);
/* 223 */     prestigeM.addEnchant(Enchantment.UNBREAKING, 1, true);
/* 224 */     prestigeToken.removeEnchantment(Enchantment.UNBREAKING);
/* 225 */     prestigeToken.setItemMeta(prestigeM);
/* 239 */     this.items.put("Turtle_Hoe", tHoe);
/* 240 */     this.items.put("Rabbit_Hoe", rHoe);
/* 241 */     this.items.put("Seagull_Hoe", sHoe);
/* 242 */     this.items.put("Prestige_Token", prestigeToken);
/* 247 */     this.commands.put("Myra", "lp user [user] parent add myra");
/* 248 */     this.commands.put("Phoenix", "lp user [user] parent add phoenix");
/* 249 */     this.commands.put("Turtle", "lp user [user] parent add turtle");
/* 250 */     this.commands.put("Rabbit", "lp user [user] parent add rabbit");
/* 251 */     this.commands.put("Seagull", "lp user [user] parent add seagull");
/* 260 */     suffixes.put("Turtle", "' &6[&eTurtle&6]&f'");
/* 261 */     suffixes.put("Rabbit", "' &d[&fRabbit&d]&f'");
/* 262 */     suffixes.put("Seagull", "' &7[&6Seagull&7]&f'");
/*     */   }
/*     */   
/*     */   public Map<Integer, ItemStack> addItem(ItemStack stack, Player player) {
/* 266 */     HashMap<Integer, ItemStack> overflow = player.getInventory().addItem(new ItemStack[] { stack });
/* 267 */     if (!overflow.isEmpty()) {
/* 268 */       for (Map.Entry<Integer, ItemStack> is : overflow.entrySet()) {
/* 269 */         player.getWorld().dropItemNaturally(player.getLocation(), is.getValue());
/*     */       }
/*     */     }
/*     */     
/* 273 */     player.updateInventory();
/* 274 */     return overflow;
/*     */   }
/*     */ 
/*     */   
/*     */   public List<String> getGroups(Player base) {
/* 279 */     GroupManager handler = groupManager.getGroupManager();
/* 280 */     if (handler == null) {
/* 281 */       return null;
/*     */     }
/* 283 */     return Arrays.asList(handler.getGroup(base.getName()).toString());
/*     */   }
/*     */
/*     */   public int getRandom(int min, int max) {
/* 297 */     return ThreadLocalRandom.current().nextInt(min, max);
/*     */   }
/*     */   
/*     */   @EventHandler(priority = EventPriority.MONITOR)
/*     */   public void onPluginDisable(PluginDisableEvent event) {
/* 302 */     saveCustomYml();
/*     */   }
/*     */ }
